// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  firstName   String
  lastName    String
  deactivated Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password       Password?
  roles          Role[]
  sessions       Session[]
  clientCardNote ClientCardNote[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id     String @id @default(cuid())
  action String // e.g. create, read, update, delete
  entity String // e.g. note, user, etc.
  access String // e.g. own or any

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model ClientCard {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  // add here client specific inforamtion
  verified  Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes ClientCardNote[]
}

model ClientCardNote {
  id String @id @default(cuid())

  content String

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  clientCard   ClientCard @relation(fields: [clientCardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientCardId String
}
